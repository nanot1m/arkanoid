(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.arkanoid = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
class BoundingBox {
    constructor(x, y, width, height, offset) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.offset = offset;
    }
    static isCollide(obj1, obj2) {
        console.log(obj1, obj2);
        const left1 = obj1.x - obj1.width / 2 * obj1.offset;
        const left2 = obj2.x - obj2.width / 2 * obj2.offset;
        const right1 = obj1.x + obj1.width / 2 * obj1.offset;
        const right2 = obj2.x + obj2.width / 2 * obj2.offset;
        const top1 = obj1.y - obj1.height / 2 * obj1.offset;
        const top2 = obj2.y - obj2.height / 2 * obj2.offset;
        const bottom1 = obj1.y + obj1.height / 2 * obj1.offset;
        const bottom2 = obj2.y + obj2.height / 2 * obj2.offset;
        console.log('left1', left1);
        console.log('left2', left2);
        console.log('right1', right1);
        console.log('right2', right2);
        console.log('top1', top1);
        console.log('top2', top2);
        console.log('bottom1', bottom1);
        console.log('bottom2', bottom2);
        return left1 < right2 &&
            right1 > left2 &&
            top1 < bottom2 &&
            bottom1 > top2;
    }
}
exports.BoundingBox = BoundingBox;

},{}],2:[function(require,module,exports){
"use strict";
const PaintProviderCollection_1 = require('./PaintProviders/PaintProviderCollection');
const SpherePaintProvider_1 = require('./PaintProviders/SpherePaintProvider');
const Ball_1 = require('./GameObjects/Ball');
const RectPaintProvider_1 = require('./PaintProviders/RectPaintProvider');
const Paddle_1 = require('./GameObjects/Paddle');
const Brick_1 = require('./GameObjects/Brick');
const Painter_1 = require('./Painter');
const GameLevel_1 = require('./GameLevel');
const Border_1 = require('./GameObjects/Border');
class Game {
    constructor(canvas, settings, devicePixelRatio) {
        this.canvas = canvas;
        this.settings = settings;
        this.levels = [];
        this.context = canvas.getContext('2d');
        if (devicePixelRatio) {
            this.scale(devicePixelRatio);
        }
    }
    init() {
        this.setupCanvas();
        this.setupContext();
        this.setupPainter();
        this.startLevel(0);
    }
    startLevel(index) {
        createLevel(this.painter, this.settings).render();
    }
    setupCanvas() {
        this.canvas.width = this.settings.CANVAS_WIDTH;
        this.canvas.height = this.settings.CANVAS_HEIGHT;
    }
    setupContext() {
        this.context.lineWidth = this.settings.LINE_WIDTH;
        this.context.strokeStyle = this.settings.STROKE_COLOR;
    }
    setupPainter() {
        const paintProviders = new PaintProviderCollection_1.PaintProviderCollection()
            .add(Ball_1.Ball, SpherePaintProvider_1.SpherePaintProvider)
            .add(Paddle_1.Paddle, RectPaintProvider_1.RectPaintProvider)
            .add(Brick_1.Brick, RectPaintProvider_1.RectPaintProvider)
            .add(Border_1.Border, RectPaintProvider_1.RectPaintProvider);
        this.painter = new Painter_1.Painter(this.context, paintProviders);
    }
    scale(ratio) {
        this.context.scale(ratio, ratio);
        Object.keys(this.settings).forEach(setting => {
            if (setting.includes('WIDTH') ||
                setting.includes('HEIGHT') ||
                setting.includes('RADIUS')) {
                this.settings[setting] *= ratio;
            }
        });
    }
}
exports.Game = Game;
function createLevel(painter, settings) {
    const paddle = new Paddle_1.Paddle(settings.CANVAS_WIDTH / 2, settings.CANVAS_HEIGHT - settings.PADDLE_HEIGHT / 2 - 10, settings.PADDLE_WIDTH, settings.PADDLE_HEIGHT);
    const ball = new Ball_1.Ball(settings.CANVAS_WIDTH / 2, settings.CANVAS_HEIGHT - settings.PADDLE_HEIGHT - settings.BALL_RADIUS - 10, settings.BALL_RADIUS);
    const brick = new Brick_1.Brick(settings.CANVAS_WIDTH / 2, settings.CANVAS_HEIGHT / 2, settings.BRICK_WIDTH, settings.BRICK_HEIGHT);
    const boundaries = [
        new Border_1.Border(0, settings.CANVAS_HEIGHT / 2, 0, settings.CANVAS_HEIGHT),
        new Border_1.Border(settings.CANVAS_WIDTH / 2, 0, settings.CANVAS_WIDTH, 0),
        new Border_1.Border(settings.CANVAS_WIDTH, settings.CANVAS_HEIGHT / 2, 0, settings.CANVAS_HEIGHT),
        new Border_1.Border(settings.CANVAS_WIDTH / 2, settings.CANVAS_HEIGHT, settings.CANVAS_WIDTH, 0)
    ];
    return new GameLevel_1.GameLevel(paddle, ball, [brick], boundaries, painter);
}

},{"./GameLevel":3,"./GameObjects/Ball":4,"./GameObjects/Border":5,"./GameObjects/Brick":6,"./GameObjects/Paddle":8,"./PaintProviders/PaintProviderCollection":9,"./PaintProviders/RectPaintProvider":10,"./PaintProviders/SpherePaintProvider":11,"./Painter":12}],3:[function(require,module,exports){
"use strict";
class GameLevel {
    constructor(paddle, ball, bricks, borders, // left, top, right, bottom,
        painter) {
        this.paddle = paddle;
        this.ball = ball;
        this.bricks = bricks;
        this.borders = borders;
        this.painter = painter;
    }
    render() {
        this.borders.forEach(this.painter.paint, this.painter);
        this.painter.paint(this.paddle);
        this.painter.paint(this.ball);
        this.bricks.forEach(this.painter.paint, this.painter);
    }
}
exports.GameLevel = GameLevel;

},{}],4:[function(require,module,exports){
"use strict";
const BoundingBox_1 = require('../CollisionBounders/BoundingBox');
const GameObject_1 = require('./GameObject');
class Ball extends GameObject_1.GameObject {
    constructor(x, y, radius) {
        const boundingBox = new BoundingBox_1.BoundingBox(x, y, 2 * radius, 2 * radius, 1);
        super(x, y, boundingBox);
        this.radius = radius;
    }
}
exports.Ball = Ball;

},{"../CollisionBounders/BoundingBox":1,"./GameObject":7}],5:[function(require,module,exports){
"use strict";
const BoundingBox_1 = require('../CollisionBounders/BoundingBox');
const GameObject_1 = require('./GameObject');
class Border extends GameObject_1.GameObject {
    constructor(x, y, width, height) {
        const boundingBox = new BoundingBox_1.BoundingBox(x, y, width, height, 1);
        super(x, y, boundingBox);
        this.width = width;
        this.height = height;
    }
}
exports.Border = Border;

},{"../CollisionBounders/BoundingBox":1,"./GameObject":7}],6:[function(require,module,exports){
"use strict";
const BoundingBox_1 = require('../CollisionBounders/BoundingBox');
const GameObject_1 = require('./GameObject');
class Brick extends GameObject_1.GameObject {
    constructor(x, y, width, height) {
        const boundingBox = new BoundingBox_1.BoundingBox(x, y, width, height, 1);
        super(x, y, boundingBox);
        this.width = width;
        this.height = height;
    }
}
exports.Brick = Brick;

},{"../CollisionBounders/BoundingBox":1,"./GameObject":7}],7:[function(require,module,exports){
"use strict";
const BoundingBox_1 = require('../CollisionBounders/BoundingBox');
class GameObject {
    constructor(x, y, boundingBox) {
        this.boundingBox = boundingBox;
        this._x = x;
        this._y = y;
        this.boundingBox = boundingBox;
        this.boundingBoxOffsetX = x - boundingBox.x;
        this.boundingBoxOffsetY = y - boundingBox.y;
    }
    collides(obj) {
        return BoundingBox_1.BoundingBox.isCollide(this.boundingBox, obj.boundingBox);
    }
    moveTo(x, y) {
        this.x = x;
        this.y = y;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        if (this.boundingBox) {
            this.boundingBox.x = value - this.boundingBoxOffsetX;
        }
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        if (this.boundingBox) {
            this.boundingBox.y = value - this.boundingBoxOffsetY;
        }
    }
}
exports.GameObject = GameObject;

},{"../CollisionBounders/BoundingBox":1}],8:[function(require,module,exports){
"use strict";
const BoundingBox_1 = require('../CollisionBounders/BoundingBox');
const GameObject_1 = require('./GameObject');
class Paddle extends GameObject_1.GameObject {
    constructor(x, y, width, height) {
        const boundingBox = new BoundingBox_1.BoundingBox(x, y, width, height, 1);
        super(x, y, boundingBox);
        this.width = width;
        this.height = height;
    }
}
exports.Paddle = Paddle;

},{"../CollisionBounders/BoundingBox":1,"./GameObject":7}],9:[function(require,module,exports){
"use strict";
class PaintProviderCollection {
    constructor(collection = new Map) {
        this.collection = collection;
    }
    add(objectClass, provider) {
        this.collection.set(objectClass, provider);
        return this;
    }
    get(objectClass) {
        return this.collection.get(objectClass);
    }
}
exports.PaintProviderCollection = PaintProviderCollection;

},{}],10:[function(require,module,exports){
"use strict";
exports.RectPaintProvider = {
    paint(context, obj) {
        context.beginPath();
        context.rect(obj.x - obj.width / 2, obj.y - obj.height / 2, obj.width, obj.height);
        context.stroke();
        context.closePath();
    }
};

},{}],11:[function(require,module,exports){
"use strict";
exports.SpherePaintProvider = {
    paint(context, obj) {
        context.beginPath();
        context.arc(obj.x, obj.y, obj.radius, 0, Math.PI * 2);
        context.stroke();
        context.closePath();
    }
};

},{}],12:[function(require,module,exports){
"use strict";
class Painter {
    constructor(context, paintProviders) {
        this.context = context;
        this.paintProviders = paintProviders;
    }
    paint(obj) {
        const paintProvider = this.paintProviders.get(obj.constructor);
        if (!paintProvider) {
            throw `Paint provider for ${obj.constructor.name} not found`;
        }
        paintProvider.paint(this.context, obj);
    }
}
exports.Painter = Painter;

},{}],13:[function(require,module,exports){
"use strict";
const Game_1 = require('./Game');
module.exports = function (canvas) {
    const main = new Game_1.Game(canvas, {
        CANVAS_WIDTH: 640,
        CANVAS_HEIGHT: 480,
        BALL_RADIUS: 10,
        BRICK_HEIGHT: 20,
        BRICK_WIDTH: 40,
        PADDLE_WIDTH: 100,
        PADDLE_HEIGHT: 15,
        LINE_WIDTH: 3,
        STROKE_COLOR: 'green'
    }, window.devicePixelRatio);
    main.init();
};

},{"./Game":2}]},{},[13])(13)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvQ29sbGlzaW9uQm91bmRlcnMvQm91bmRpbmdCb3gudHMiLCJzcmMvR2FtZS50cyIsInNyYy9HYW1lTGV2ZWwudHMiLCJzcmMvR2FtZU9iamVjdHMvQmFsbC50cyIsInNyYy9HYW1lT2JqZWN0cy9Cb3JkZXIudHMiLCJzcmMvR2FtZU9iamVjdHMvQnJpY2sudHMiLCJzcmMvR2FtZU9iamVjdHMvR2FtZU9iamVjdC50cyIsInNyYy9HYW1lT2JqZWN0cy9QYWRkbGUudHMiLCJzcmMvUGFpbnRQcm92aWRlcnMvUGFpbnRQcm92aWRlckNvbGxlY3Rpb24udHMiLCJzcmMvUGFpbnRQcm92aWRlcnMvUmVjdFBhaW50UHJvdmlkZXIudHMiLCJzcmMvUGFpbnRQcm92aWRlcnMvU3BoZXJlUGFpbnRQcm92aWRlci50cyIsInNyYy9QYWludGVyLnRzIiwic3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0lBQ0UsWUFDUyxDQUFTLEVBQ1QsQ0FBUyxFQUNULEtBQWEsRUFDYixNQUFjLEVBQ2QsTUFBYztRQUpkLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ1QsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3BCLENBQUM7SUFFSixPQUFPLFNBQVMsQ0FBQyxJQUFpQixFQUFFLElBQWlCO1FBRW5ELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRXZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDbkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUVwRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDbkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQ25ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUN0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFFdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDekIsT0FB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b3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydCBjbGFzcyBCb3VuZGluZ0JveCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB4OiBudW1iZXIsXG4gICAgcHVibGljIHk6IG51bWJlcixcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcixcbiAgICBwdWJsaWMgaGVpZ2h0OiBudW1iZXIsXG4gICAgcHVibGljIG9mZnNldDogbnVtYmVyXG4gICkge31cblxuICBzdGF0aWMgaXNDb2xsaWRlKG9iajE6IEJvdW5kaW5nQm94LCBvYmoyOiBCb3VuZGluZ0JveCk6IGJvb2xlYW4ge1xuXG4gICAgY29uc29sZS5sb2cob2JqMSwgb2JqMilcblxuICAgIGNvbnN0IGxlZnQxID0gb2JqMS54IC0gb2JqMS53aWR0aCAvIDIgKiBvYmoxLm9mZnNldFxuICAgIGNvbnN0IGxlZnQyID0gb2JqMi54IC0gb2JqMi53aWR0aCAvIDIgKiBvYmoyLm9mZnNldFxuICAgIGNvbnN0IHJpZ2h0MSA9IG9iajEueCArIG9iajEud2lkdGggLyAyICogb2JqMS5vZmZzZXRcbiAgICBjb25zdCByaWdodDIgPSBvYmoyLnggKyBvYmoyLndpZHRoIC8gMiAqIG9iajIub2Zmc2V0XG5cbiAgICBjb25zdCB0b3AxID0gb2JqMS55IC0gb2JqMS5oZWlnaHQgLyAyICogb2JqMS5vZmZzZXRcbiAgICBjb25zdCB0b3AyID0gb2JqMi55IC0gb2JqMi5oZWlnaHQgLyAyICogb2JqMi5vZmZzZXRcbiAgICBjb25zdCBib3R0b20xID0gb2JqMS55ICsgb2JqMS5oZWlnaHQgLyAyICogb2JqMS5vZmZzZXRcbiAgICBjb25zdCBib3R0b20yID0gb2JqMi55ICsgb2JqMi5oZWlnaHQgLyAyICogb2JqMi5vZmZzZXRcblxuICAgIGNvbnNvbGUubG9nKCdsZWZ0MScsIGxlZnQxKVxuICAgIGNvbnNvbGUubG9nKCdsZWZ0MicsIGxlZnQyKVxuICAgIGNvbnNvbGUubG9nKCdyaWdodDEnLCByaWdodDEpXG4gICAgY29uc29sZS5sb2coJ3JpZ2h0MicsIHJpZ2h0MilcbiAgICBjb25zb2xlLmxvZygndG9wMScsIHRvcDEpXG4gICAgY29uc29sZS5sb2coJ3RvcDInLCB0b3AyKVxuICAgIGNvbnNvbGUubG9nKCdib3R0b20xJywgYm90dG9tMSlcbiAgICBjb25zb2xlLmxvZygnYm90dG9tMicsIGJvdHRvbTIpXG5cbiAgICByZXR1cm4gbGVmdDEgPCByaWdodDIgJiZcbiAgICAgICAgICAgcmlnaHQxID4gbGVmdDIgJiZcbiAgICAgICAgICAgdG9wMSA8IGJvdHRvbTIgJiZcbiAgICAgICAgICAgYm90dG9tMSA+IHRvcDJcbiAgfVxufSIsImltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi9TZXR0aW5ncydcbmltcG9ydCB7IFBhaW50UHJvdmlkZXJDb2xsZWN0aW9uIH0gZnJvbSAnLi9QYWludFByb3ZpZGVycy9QYWludFByb3ZpZGVyQ29sbGVjdGlvbidcbmltcG9ydCB7IFNwaGVyZVBhaW50UHJvdmlkZXIgfSBmcm9tICcuL1BhaW50UHJvdmlkZXJzL1NwaGVyZVBhaW50UHJvdmlkZXInXG5pbXBvcnQgeyBCYWxsIH0gZnJvbSAnLi9HYW1lT2JqZWN0cy9CYWxsJ1xuaW1wb3J0IHsgUmVjdFBhaW50UHJvdmlkZXIgfSBmcm9tICcuL1BhaW50UHJvdmlkZXJzL1JlY3RQYWludFByb3ZpZGVyJ1xuaW1wb3J0IHsgUGFkZGxlIH0gZnJvbSAnLi9HYW1lT2JqZWN0cy9QYWRkbGUnXG5pbXBvcnQgeyBCcmljayB9IGZyb20gJy4vR2FtZU9iamVjdHMvQnJpY2snXG5pbXBvcnQgeyBQYWludGVyIH0gZnJvbSAnLi9QYWludGVyJ1xuaW1wb3J0IHsgR2FtZUxldmVsIH0gZnJvbSAnLi9HYW1lTGV2ZWwnXG5pbXBvcnQgeyBCb3JkZXIgfSBmcm9tICcuL0dhbWVPYmplY3RzL0JvcmRlcidcbmltcG9ydCBzZXQgPSBSZWZsZWN0LnNldFxuXG5leHBvcnQgY2xhc3MgR2FtZSB7XG4gIHByaXZhdGUgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXG4gIHByaXZhdGUgcGFpbnRlcjogUGFpbnRlclxuICBwcml2YXRlIGxldmVsczogR2FtZUxldmVsW10gPSBbXVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcbiAgICBwcml2YXRlIHNldHRpbmdzOiBTZXR0aW5ncyxcbiAgICBkZXZpY2VQaXhlbFJhdGlvPzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMuY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBpZiAoZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgdGhpcy5zY2FsZShkZXZpY2VQaXhlbFJhdGlvKVxuICAgIH1cbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zZXR1cENhbnZhcygpXG4gICAgdGhpcy5zZXR1cENvbnRleHQoKVxuICAgIHRoaXMuc2V0dXBQYWludGVyKClcblxuICAgIHRoaXMuc3RhcnRMZXZlbCgwKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydExldmVsKGluZGV4OiBudW1iZXIpIHtcbiAgICBjcmVhdGVMZXZlbCh0aGlzLnBhaW50ZXIsIHRoaXMuc2V0dGluZ3MpLnJlbmRlcigpXG4gIH1cblxuICBwcml2YXRlIHNldHVwQ2FudmFzKCkge1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5zZXR0aW5ncy5DQU5WQVNfV0lEVEhcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLnNldHRpbmdzLkNBTlZBU19IRUlHSFRcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBDb250ZXh0KCkge1xuICAgIHRoaXMuY29udGV4dC5saW5lV2lkdGggPSB0aGlzLnNldHRpbmdzLkxJTkVfV0lEVEhcbiAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLnNldHRpbmdzLlNUUk9LRV9DT0xPUlxuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cFBhaW50ZXIoKSB7XG4gICAgY29uc3QgcGFpbnRQcm92aWRlcnMgPSBuZXcgUGFpbnRQcm92aWRlckNvbGxlY3Rpb24oKVxuICAgICAgLmFkZChCYWxsLCBTcGhlcmVQYWludFByb3ZpZGVyKVxuICAgICAgLmFkZChQYWRkbGUsIFJlY3RQYWludFByb3ZpZGVyKVxuICAgICAgLmFkZChCcmljaywgUmVjdFBhaW50UHJvdmlkZXIpXG4gICAgICAuYWRkKEJvcmRlciwgUmVjdFBhaW50UHJvdmlkZXIpXG5cbiAgICB0aGlzLnBhaW50ZXIgPSBuZXcgUGFpbnRlcih0aGlzLmNvbnRleHQsIHBhaW50UHJvdmlkZXJzKVxuICB9XG5cbiAgcHJpdmF0ZSBzY2FsZShyYXRpbykge1xuICAgIHRoaXMuY29udGV4dC5zY2FsZShyYXRpbywgcmF0aW8pXG4gICAgT2JqZWN0LmtleXModGhpcy5zZXR0aW5ncykuZm9yRWFjaChzZXR0aW5nID0+IHtcbiAgICAgIGlmIChzZXR0aW5nLmluY2x1ZGVzKCdXSURUSCcpIHx8XG4gICAgICAgICAgc2V0dGluZy5pbmNsdWRlcygnSEVJR0hUJykgfHxcbiAgICAgICAgICBzZXR0aW5nLmluY2x1ZGVzKCdSQURJVVMnKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Nbc2V0dGluZ10gKj0gcmF0aW9cbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxldmVsKHBhaW50ZXI6IFBhaW50ZXIsIHNldHRpbmdzOiBTZXR0aW5ncykge1xuICBjb25zdCBwYWRkbGUgPSBuZXcgUGFkZGxlKFxuICAgIHNldHRpbmdzLkNBTlZBU19XSURUSCAvIDIsXG4gICAgc2V0dGluZ3MuQ0FOVkFTX0hFSUdIVCAtIHNldHRpbmdzLlBBRERMRV9IRUlHSFQgLyAyIC0gMTAsXG4gICAgc2V0dGluZ3MuUEFERExFX1dJRFRILFxuICAgIHNldHRpbmdzLlBBRERMRV9IRUlHSFRcbiAgKVxuICBjb25zdCBiYWxsID0gbmV3IEJhbGwoXG4gICAgc2V0dGluZ3MuQ0FOVkFTX1dJRFRIIC8gMixcbiAgICBzZXR0aW5ncy5DQU5WQVNfSEVJR0hUIC0gc2V0dGluZ3MuUEFERExFX0hFSUdIVCAtIHNldHRpbmdzLkJBTExfUkFESVVTIC0gMTAsXG4gICAgc2V0dGluZ3MuQkFMTF9SQURJVVMsXG4gIClcbiAgY29uc3QgYnJpY2sgPSBuZXcgQnJpY2soXG4gICAgc2V0dGluZ3MuQ0FOVkFTX1dJRFRIIC8gMixcbiAgICBzZXR0aW5ncy5DQU5WQVNfSEVJR0hUIC8gMixcbiAgICBzZXR0aW5ncy5CUklDS19XSURUSCxcbiAgICBzZXR0aW5ncy5CUklDS19IRUlHSFRcbiAgKVxuICBjb25zdCBib3VuZGFyaWVzID0gW1xuICAgIG5ldyBCb3JkZXIoXG4gICAgICAwLCBzZXR0aW5ncy5DQU5WQVNfSEVJR0hUIC8gMixcbiAgICAgIDAsIHNldHRpbmdzLkNBTlZBU19IRUlHSFRcbiAgICApLFxuICAgIG5ldyBCb3JkZXIoXG4gICAgICBzZXR0aW5ncy5DQU5WQVNfV0lEVEggLyAyLCAwLFxuICAgICAgc2V0dGluZ3MuQ0FOVkFTX1dJRFRILCAwXG4gICAgKSxcbiAgICBuZXcgQm9yZGVyKFxuICAgICAgc2V0dGluZ3MuQ0FOVkFTX1dJRFRILCBzZXR0aW5ncy5DQU5WQVNfSEVJR0hUIC8gMixcbiAgICAgIDAsIHNldHRpbmdzLkNBTlZBU19IRUlHSFRcbiAgICApLFxuICAgIG5ldyBCb3JkZXIoXG4gICAgICBzZXR0aW5ncy5DQU5WQVNfV0lEVEggLyAyLCBzZXR0aW5ncy5DQU5WQVNfSEVJR0hULFxuICAgICAgc2V0dGluZ3MuQ0FOVkFTX1dJRFRILCAwXG4gICAgKVxuICBdXG5cbiAgcmV0dXJuIG5ldyBHYW1lTGV2ZWwoXG4gICAgcGFkZGxlLFxuICAgIGJhbGwsXG4gICAgW2JyaWNrXSxcbiAgICBib3VuZGFyaWVzLFxuICAgIHBhaW50ZXJcbiAgKVxufSIsImltcG9ydCB7IFBhZGRsZSB9IGZyb20gJy4vR2FtZU9iamVjdHMvUGFkZGxlJ1xuaW1wb3J0IHsgQmFsbCB9IGZyb20gJy4vR2FtZU9iamVjdHMvQmFsbCdcbmltcG9ydCB7IEJyaWNrIH0gZnJvbSAnLi9HYW1lT2JqZWN0cy9CcmljaydcbmltcG9ydCB7IEJvcmRlciB9IGZyb20gJy4vR2FtZU9iamVjdHMvQm9yZGVyJ1xuaW1wb3J0IHsgUGFpbnRlciB9IGZyb20gJy4vUGFpbnRlcidcblxuZXhwb3J0IGNsYXNzIEdhbWVMZXZlbCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGFkZGxlOiBQYWRkbGUsXG4gICAgcHJpdmF0ZSBiYWxsOiBCYWxsLFxuICAgIHByaXZhdGUgYnJpY2tzOiBCcmlja1tdLFxuICAgIHByaXZhdGUgYm9yZGVyczogQm9yZGVyW10sIC8vIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSxcbiAgICBwcml2YXRlIHBhaW50ZXI6IFBhaW50ZXJcbiAgKSB7fVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmJvcmRlcnMuZm9yRWFjaCh0aGlzLnBhaW50ZXIucGFpbnQsIHRoaXMucGFpbnRlcilcbiAgICB0aGlzLnBhaW50ZXIucGFpbnQodGhpcy5wYWRkbGUpXG4gICAgdGhpcy5wYWludGVyLnBhaW50KHRoaXMuYmFsbClcbiAgICB0aGlzLmJyaWNrcy5mb3JFYWNoKHRoaXMucGFpbnRlci5wYWludCwgdGhpcy5wYWludGVyKVxuICB9XG59IiwiaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi9Db2xsaXNpb25Cb3VuZGVycy9Cb3VuZGluZ0JveCdcbmltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL0dhbWVPYmplY3QnXG5cbmV4cG9ydCBjbGFzcyBCYWxsIGV4dGVuZHMgR2FtZU9iamVjdCB7XG4gIHJhZGl1czogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyKSB7XG4gICAgY29uc3QgYm91bmRpbmdCb3ggPSBuZXcgQm91bmRpbmdCb3goeCwgeSwgMiAqIHJhZGl1cywgMiAqIHJhZGl1cywgMSlcbiAgICBzdXBlcih4LCB5LCBib3VuZGluZ0JveClcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1c1xuICB9XG59IiwiaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi9Db2xsaXNpb25Cb3VuZGVycy9Cb3VuZGluZ0JveCdcbmltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL0dhbWVPYmplY3QnXG5cbmV4cG9ydCBjbGFzcyBCb3JkZXIgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgd2lkdGg6IG51bWJlclxuICBoZWlnaHQ6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBib3VuZGluZ0JveCA9IG5ldyBCb3VuZGluZ0JveCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCAxKVxuICAgIHN1cGVyKHgsIHksIGJvdW5kaW5nQm94KVxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG4gIH1cbn1cbiIsImltcG9ydCB7IEJvdW5kaW5nQm94IH0gZnJvbSAnLi4vQ29sbGlzaW9uQm91bmRlcnMvQm91bmRpbmdCb3gnXG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9HYW1lT2JqZWN0J1xuXG5leHBvcnQgY2xhc3MgQnJpY2sgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgd2lkdGg6IG51bWJlclxuICBoZWlnaHQ6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBib3VuZGluZ0JveCA9IG5ldyBCb3VuZGluZ0JveCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCAxKVxuICAgIHN1cGVyKHgsIHksIGJvdW5kaW5nQm94KVxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG4gIH1cbn1cbiIsImltcG9ydCB7IEJvdW5kaW5nQm94IH0gZnJvbSAnLi4vQ29sbGlzaW9uQm91bmRlcnMvQm91bmRpbmdCb3gnXG5cbmV4cG9ydCBjbGFzcyBHYW1lT2JqZWN0IHtcbiAgcHJpdmF0ZSBfeDogbnVtYmVyXG4gIHByaXZhdGUgX3k6IG51bWJlclxuICBwcml2YXRlIGJvdW5kaW5nQm94T2Zmc2V0WDogbnVtYmVyXG4gIHByaXZhdGUgYm91bmRpbmdCb3hPZmZzZXRZOiBudW1iZXJcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgcHVibGljIGJvdW5kaW5nQm94OiBCb3VuZGluZ0JveCkge1xuICAgIHRoaXMuX3ggPSB4XG4gICAgdGhpcy5feSA9IHlcbiAgICB0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3hcbiAgICB0aGlzLmJvdW5kaW5nQm94T2Zmc2V0WCA9IHggLSBib3VuZGluZ0JveC54XG4gICAgdGhpcy5ib3VuZGluZ0JveE9mZnNldFkgPSB5IC0gYm91bmRpbmdCb3gueVxuICB9XG5cbiAgY29sbGlkZXMob2JqOiBHYW1lT2JqZWN0KSB7XG4gICAgcmV0dXJuIEJvdW5kaW5nQm94LmlzQ29sbGlkZSh0aGlzLmJvdW5kaW5nQm94LCBvYmouYm91bmRpbmdCb3gpXG4gIH1cblxuICBtb3ZlVG8oeCwgeSk6IHZvaWQge1xuICAgIHRoaXMueCA9IHhcbiAgICB0aGlzLnkgPSB5XG4gIH1cblxuICBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl94XG4gIH1cblxuICBzZXQgeCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feCA9IHZhbHVlXG4gICAgaWYgKHRoaXMuYm91bmRpbmdCb3gpIHtcbiAgICAgIHRoaXMuYm91bmRpbmdCb3gueCA9IHZhbHVlIC0gdGhpcy5ib3VuZGluZ0JveE9mZnNldFhcbiAgICB9XG4gIH1cblxuICBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95XG4gIH1cblxuICBzZXQgeSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feSA9IHZhbHVlXG4gICAgaWYgKHRoaXMuYm91bmRpbmdCb3gpIHtcbiAgICAgIHRoaXMuYm91bmRpbmdCb3gueSA9IHZhbHVlIC0gdGhpcy5ib3VuZGluZ0JveE9mZnNldFlcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uL0NvbGxpc2lvbkJvdW5kZXJzL0JvdW5kaW5nQm94J1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4vR2FtZU9iamVjdCdcblxuZXhwb3J0IGNsYXNzIFBhZGRsZSBleHRlbmRzIEdhbWVPYmplY3Qge1xuICB3aWR0aDogbnVtYmVyXG4gIGhlaWdodDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gbmV3IEJvdW5kaW5nQm94KHgsIHksIHdpZHRoLCBoZWlnaHQsIDEpXG4gICAgc3VwZXIoeCwgeSwgYm91bmRpbmdCb3gpXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHRcbiAgfVxufSIsImltcG9ydCB7IFBhaW50UHJvdmlkZXIgfSBmcm9tICcuL1BhaW50UHJvdmlkZXInXG5cbmV4cG9ydCBjbGFzcyBQYWludFByb3ZpZGVyQ29sbGVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sbGVjdGlvbjogTWFwPEZ1bmN0aW9uLCBQYWludFByb3ZpZGVyPiA9IG5ldyBNYXApIHtcblxuICB9XG5cbiAgYWRkKG9iamVjdENsYXNzOiBGdW5jdGlvbiwgcHJvdmlkZXI6IFBhaW50UHJvdmlkZXIpIHtcbiAgICB0aGlzLmNvbGxlY3Rpb24uc2V0KG9iamVjdENsYXNzLCBwcm92aWRlcilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZ2V0KG9iamVjdENsYXNzOiBGdW5jdGlvbik6IFBhaW50UHJvdmlkZXIgfCB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmdldChvYmplY3RDbGFzcylcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGFpbnRQcm92aWRlciB9IGZyb20gJy4vUGFpbnRQcm92aWRlcidcblxuZXhwb3J0IGludGVyZmFjZSBSZWN0T2JqZWN0IHtcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHdpZHRoOiBudW1iZXIsXG4gIGhlaWdodDogbnVtYmVyXG59XG5cbmV4cG9ydCBjb25zdCBSZWN0UGFpbnRQcm92aWRlcjogUGFpbnRQcm92aWRlciA9IHtcbiAgcGFpbnQoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBvYmo6IFJlY3RPYmplY3QpIHtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpXG4gICAgY29udGV4dC5yZWN0KG9iai54IC0gb2JqLndpZHRoIC8gMiwgb2JqLnkgLSBvYmouaGVpZ2h0IC8gMiwgb2JqLndpZHRoLCBvYmouaGVpZ2h0KVxuICAgIGNvbnRleHQuc3Ryb2tlKClcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpXG4gIH1cbn1cbiIsImltcG9ydCB7IFBhaW50UHJvdmlkZXIgfSBmcm9tICcuL1BhaW50UHJvdmlkZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BoZXJlT2JqZWN0IHtcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHJhZGl1czogbnVtYmVyXG59XG5cbmV4cG9ydCBjb25zdCBTcGhlcmVQYWludFByb3ZpZGVyOiBQYWludFByb3ZpZGVyID0ge1xuICBwYWludChjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG9iajogU3BoZXJlT2JqZWN0KSB7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKVxuICAgIGNvbnRleHQuYXJjKG9iai54LCBvYmoueSwgb2JqLnJhZGl1cywgMCwgTWF0aC5QSSAqIDIpXG4gICAgY29udGV4dC5zdHJva2UoKVxuICAgIGNvbnRleHQuY2xvc2VQYXRoKClcbiAgfVxufVxuIiwiaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4vR2FtZU9iamVjdHMvR2FtZU9iamVjdCdcbmltcG9ydCB7IFBhaW50UHJvdmlkZXJDb2xsZWN0aW9uIH0gZnJvbSAnLi9QYWludFByb3ZpZGVycy9QYWludFByb3ZpZGVyQ29sbGVjdGlvbidcblxuZXhwb3J0IGNsYXNzIFBhaW50ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBwcml2YXRlIHBhaW50UHJvdmlkZXJzOiBQYWludFByb3ZpZGVyQ29sbGVjdGlvblxuICApIHt9XG5cbiAgcGFpbnQob2JqOiBHYW1lT2JqZWN0KSB7XG4gICAgY29uc3QgcGFpbnRQcm92aWRlciA9IHRoaXMucGFpbnRQcm92aWRlcnMuZ2V0KG9iai5jb25zdHJ1Y3RvcilcbiAgICBpZiAoIXBhaW50UHJvdmlkZXIpIHtcbiAgICAgIHRocm93IGBQYWludCBwcm92aWRlciBmb3IgJHtvYmouY29uc3RydWN0b3IubmFtZX0gbm90IGZvdW5kYFxuICAgIH1cbiAgICBwYWludFByb3ZpZGVyLnBhaW50KHRoaXMuY29udGV4dCwgb2JqKVxuICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lIH0gZnJvbSAnLi9HYW1lJ1xuXG5leHBvcnQgPSBmdW5jdGlvbiAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICBjb25zdCBtYWluID0gbmV3IEdhbWUoXG4gICAgY2FudmFzLCB7XG4gICAgICBDQU5WQVNfV0lEVEg6IDY0MCxcbiAgICAgIENBTlZBU19IRUlHSFQ6IDQ4MCxcbiAgICAgIEJBTExfUkFESVVTOiAxMCxcbiAgICAgIEJSSUNLX0hFSUdIVDogMjAsXG4gICAgICBCUklDS19XSURUSDogNDAsXG4gICAgICBQQURETEVfV0lEVEg6IDEwMCxcbiAgICAgIFBBRERMRV9IRUlHSFQ6IDE1LFxuICAgICAgTElORV9XSURUSDogMyxcbiAgICAgIFNUUk9LRV9DT0xPUjogJ2dyZWVuJ1xuICAgIH0sXG4gICAgd2luZG93LmRldmljZVBpeGVsUmF0aW9cbiAgKVxuICBtYWluLmluaXQoKVxufVxuIl19
